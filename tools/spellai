#!/usr/bin/perl -w
# spellai 0.4.2
# 
# Skriptukas naujiems lietuviðkiems ispell þodynams sudarinëti. Skaito þodþius,
# ir jeigu neapibrëþti jokie flagai, iðsiaiðkina, kokiø reikia.
#
# Vartojimas:
# spellai                       # skaito þodþius ið klaviatûros, veda á ekranà
# spellai þodynas               # skaito ið failo þodynas, veda i ekranà
# spellai þodynas > geresnis    # skaito ið 'þodynas', raðo á 'geresnis'
#
# daþniausiai turëtø bûti naudojamas 3 atvejis - su ispell'u surinktiems
# neþinomiems þodþiams sutvarkyti. Kiekvienàkart á asmeniná þodynà ádëjæs
# þodþiø, kad turëtum gerai veikiantá þodynà, paleisk 
#  
# spellai ~/.ispell_default > sutvarkyti ; mv sutvarkyti ~/.ispell_default
#
# Paraðë Gediminas Paulauskas <menesis@delfi.lt>, patobulinæs skriptus ið
# Alberto Agejevo <alga@uosis.mif.vu.lt> bei Mariaus Gedmino <mgedmin@delfi.lt>.
#
# TODO:
# * daugiau intelekto atspëjant þodþiø formas
# * parametrais nurodomos ávesties/iðvesties bylos 
# * naudoti ispell'à patikrinimui, gal jau toks þodis yra þodyne 
#   reikia tam, jei atnaujinant þodynus ið kitur, tie patys þodþiai buvo
#   vartotojo asmeniniam þodyne.
# * --help

#             api ati
#             ap  at  á ið nu pa par per pra pri su uþ
# be nieko     a   b  c  d  e  f  g   h   i   j   k  l
# su sangràþa  m   n  o	 p  q  r  s   t   u   v   w  x

%prefix = (
     c => "á",		d => "ið",		e => "nu",
     f => "pa",		g => "par",		h => "per",
     i => "pra",	j => "pri",		k => "su",
     l => "uþ",		m => "apsi",	n => "atsi",
     o => "ási",	p => "iðsi",	q => "nusi",
     r => "pasi",	s => "parsi",	t => "persi",
     u => "prasi",	v => "prisi",	w => "susi",
     x => "uþsi"
);

sub jeigu
{
    my ($q, $def) = @_;
    my $question;
    if (defined $def) {
	    $def = $def ? "t" : "n";
    	$question = "$q (t/n) [$def]: ";
    } else {
	    $question = "$q (t/n): ";
    }
    my $answer = "";
    while ($answer !~ /[ntNT]/) {
        print $question;
        chomp($answer = <>);
	    if ($answer eq "" and defined $def) {
    	    $answer = $def;
	    }
    };
    return $answer ne "n";
}

local $flags;

sub veiksmazodis {
    print "=== Veiksmaþodis ===\n";
    print "Áveskite pagrindines formas, be jokiø prieðdëliø ir sangràþos dalelyèiø.\n";
    my ($bend, $es, $but);
    $es = $_[0];
    print "Bendratis [$es]: ";
    chomp ($bend = <STDIN>);
    $bend = $es if $bend eq "";
    while ($bend !~ /ti$/)  {
    	print "*** Tai ne bendratis!\n Ávesk bendratá: ";
        chomp ($bend = <STDIN>);
    }

    print "Esamasis laikas (kà daro?): ";
    chomp ($es = <STDIN>);
    print "Bûtasis kartinis (kà darë?): ";
    chomp ($but = <STDIN>);
    
    foreach $i (keys (%prefix), 'a[pt]', 'a[pt]i') {
        $prefix = ($i =~ /^a\[/) ? $i : $prefix{$i};
        next unless ($bend =~ /^$prefix(.*)/); 
        local $sb = $1;
        next unless ($es =~ /^$prefix(.*)/); 
        local $se = $1;
        next unless ($but =~ /^$prefix(.*)/); 
        local $su = $1;
        if (jeigu ("\n*** O gal visgi $sb, $se, $su?", 1)) {
	        print "*** nagrinëjam veiksmaþodá $sb\n";
	    	$bend = $sb; $es = $se; $but = $su;
			last;
		}
    }
    
    $flags .= jeigu ("${bend}s, ${es}si, ${but}si?", 1) ? 'SX' : 'NX';

    $pref = ($bend =~ /^[bpBP]/) ? 'api' : 'ap';
    $flags .= 'a' if jeigu ("$pref$bend, $pref$es, $pref$but?", 1);
    
    $pref = ($bend =~ /^[dtDT]/) ? 'ati' : 'at';
    $flags .= 'b' if jeigu ("$pref$bend, $pref$es, $pref$but?", 1);
    
    foreach $i (sort keys %prefix) {
        $pref = $prefix{$i};
        $flags .= $i if jeigu ("$pref$bend, $pref$es, $pref$but?", 1);
    }

    if ($bend =~ /[ûy]ti$/ and
        $es =~ /[ûy].a$/ and
        $but =~ /[ui].o$/) {
        $bf = "U";
    } else {
        $bf = "T";
    }
    
    select STDOUT;
    print "$bend/$bf$flags\n";
    print "$es/E$flags\n";
    if ($bend =~ /yti$/){
        print "$but/Y$flags\n";
    } else {
        print "$but/P$flags\n";
    }
    if ($flags =~ /S/) {
        print "${bend}s/$bf\n";
        print "${es}si/E\n";
        if ($bend =~ /yti$/){
            print "${but}si/Y\n";
        } else {
    	    print "${but}si/P\n";
        }
    }
    select STDERR;
    print "====================\n";
}    # veiksmaþodþio pabaiga

sub daiktavardis {
    $word = $_[0];
    print "=== Daiktavardis ===\n";
    print "Áveskite vardininkà [$word]: ";
    chomp ($_ = <STDIN>);
    $word = $_ if $_;

    if ($word !~ /(.*)(is|uo)$/i) {
        $flags = 'D'
    } else {
        my ($sak, $gal) = ($1, $2);
	    $sak =~ s/t$/è/;
    	$sak =~ s/d$/dþ/;
        if ($gal eq 'is' and
            jeigu ("Ar vienaskaitos ko? atsakymas yra ${sak}io?", 1)) {
	        $flags = 'D'
    	} else {
            $flags = jeigu ("Ar vyriðkos giminës?", 1) ? 'V' : 'M';
            $flags .= jeigu ("Ar galûnë minkðta (${sak}iø)?", 1) ? 'I' : 'K';
    	}
    }

    $flags .= 'N' if jeigu ("Ar yra toks daiktas ne$word?", 0);

    print STDOUT "$word/$flags\n";
    print "====================\n";

}    # daiktavardþio pabaiga

sub budvardis {
    my ($kokyb, $ivardz);
    $word = $_[0];
    print "==== Bûdvardis =====\n";
    print "Áveskite vardininkà [$word]: ";
    chomp ($_ = <STDIN>);
    $word = $_ if $_;

    $word =~ /(.*)(.)s$/i;
	$kokyb = $2 ne 'i';
    if (jeigu ("Ar tai kokybinis bûdvardis (kaip $1$2; ${word}is; turi laipsnius)?", $kokyb))
    {
        $flags = 'AQ';
    } else {
        my ($sak, $gal) = ($1, $2);
        $sak =~ s/t$/è/;
	    $sak =~ s/d$/dþ/;
        $flags = jeigu ("Ar tai santykinis bûdvardis (kokiems - ${sak}iams)?", 1) ? 'B' : 'A' 
    }
    
    $flags .= 'N' if jeigu ("ar gali bûti ne$word?", $kokyb);
    print STDOUT "$word/$flags\n";
    print "====================\n";

}    # bûdvardþio pabaiga

select STDERR;
print "Programa, generuojanti reikalingus áraðus á ispell'o þodynà\n";
print "Ið jos iðeinama, kai paklausus þodþio dalies, ávedi 'q'\n";
print "====================\n";

if (@ARGV) {
    $ARGV = shift;
} else {
    $ARGV = '-';   # STDIN
}
$KLAUSTI = $ARGV eq '-';
open (BYLA, $ARGV) or warn "Negaliu atidaryti $ARGV: $!\n";

print "Áveskite þodá (^D baigti): " if $KLAUSTI;
while ($word = <BYLA>) {
    if ($word =~ /^[\s#]+/         # komentarai ir tuðèios eilutës
        or $word =~ /.\/./) {       # jau turi flagus, nenagrinëti
        print STDOUT $word;
    	next;
    }
    print $word;
    chomp $word;
    $flags = '';

    do  {
    	print "Tai daiktavardis, veiksmaþodis, bûdvardis ar nekaitomas þodis? (d/v/b/n) [n] ";
        chomp ($_ = <STDIN>);
	    $_ = 'n' if $_ eq '';
    } until /^[dvbnqr]$/i;

    if    (/v/i) { veiksmazodis ($word) }
    elsif (/d/i) { daiktavardis ($word) }
    elsif (/b/i) { budvardis    ($word) }
    elsif (/q/i) { 
        print "Baigiam darbà... Suliek rezultatus ir duomenis á vienà bylà\n";
    	last 
    }
    elsif (/r/i) { 
        print "Iðtrinu þodá $word\n";
        print "====================\n";
	    next
    }
    else {
        print "==== Nekaitomas ====\n";
        print STDOUT $word, "\n";
        print "====================\n";
    }
    print "Áveskite þodá (^D baigti): " if $KLAUSTI;
}

print "\nIki!\n";

# vim: ts=4 sw=4 expandtab
# EOF
